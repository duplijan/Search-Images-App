{"version":3,"sources":["Result.js","ImageGallery.js","ImageSearch.js","Navbar.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Result","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","current","e","setState","target","largeImageURL","console","log","_this2","images","map","image","react_default","a","createElement","key","id","className","src","alt","title","onClick","openFullScreen","react_fontawesome_index_es","icon","faHeart","likes","user","Component","ImagesGallery","src_Result","ImageSearch","searchValue","getInputValue","bind","assertThisInitialized","getSearchedResults","value","query","preventDefault","fetch","concat","then","resp","json","data","hits","err","onSubmit","onChange","placeholder","type","ImageGallery","Navbar","Header","App","src_Navbar","src_Header","src_ImageSearch","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oSAwCeA,cAlCb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,QAAS,IAHKR,8EAMHS,GACbN,KAAKO,SAAS,CACZF,QAASC,EAAEE,OAAOC,gBAEpBC,QAAQC,IAAIX,KAAKI,wCAGX,IAAAQ,EAAAZ,KACN,OACEA,KAAKJ,MAAMiB,OAAOC,IAAK,SAAAC,GACrB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAMK,GAAIC,UAAU,gBAC5BL,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAMN,cAAec,IAAKR,EAAMS,MAAOC,QAAS,SAACnB,GAAD,OAAOM,EAAKc,eAAepB,MACrFU,EAAAC,EAAAC,cAAA,OAAKG,UAAU,qBACbL,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAiBC,KAAMC,MACvBb,EAAAC,EAAAC,cAAA,SAAIH,EAAMe,QAEZd,EAAAC,EAAAC,cAAA,QAAMG,UAAU,4BACdL,EAAAC,EAAAC,cAAA,mBAAWH,EAAMgB,iBAzBVC,aCMNC,EARQ,SAACrC,GACrB,OACIoB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAACgB,EAAD,CAAQrB,OAAUjB,EAAMiB,WCkDlBsB,cAlDX,SAAAA,EAAYvC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmC,IAChBtC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqC,GAAAhC,KAAAH,KAAMJ,KACDQ,MAAQ,CACXgC,YAAa,GACbvB,OAAQ,IAGZhB,EAAKwC,cAAgBxC,EAAKwC,cAAcC,KAAnBxC,OAAAyC,EAAA,EAAAzC,QAAAyC,EAAA,EAAAzC,CAAAD,KACrBA,EAAK2C,mBAAqB3C,EAAK2C,mBAAmBF,KAAxBxC,OAAAyC,EAAA,EAAAzC,QAAAyC,EAAA,EAAAzC,CAAAD,KARRA,6EAWJS,GACVN,KAAKO,SAAS,CACZ6B,YAAa9B,EAAEE,OAAOiC,MACtBC,MAAO1C,KAAKI,MAAMgC,yDAKL9B,GAAE,IAAAM,EAAAZ,KACnBM,EAAEqC,iBAGA,IACEC,MAAK,GAAAC,OAHG,0BAGH,UAAAA,OAFM,qCAEN,OAAAA,OAA4B7C,KAAKI,MAAMgC,YAAvC,sBACJU,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAG,GAAI,OAAIrC,EAAKL,SAAS,CAC1BM,OAAQoC,EAAKC,KACbd,YAAa,OAEf,MAAMe,GACNzC,QAAQC,IAAIwC,qCAKhB,OACEnC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAA,QAAMkC,SAAWpD,KAAKwC,mBAAoBnB,UAAU,eAClDL,EAAAC,EAAAC,cAAA,iDAGAF,EAAAC,EAAAC,cAAA,SAAOmC,SAAUrD,KAAKqC,cAAeI,MAAOzC,KAAKI,MAAMgC,YAAckB,YAAY,iBACjFtC,EAAAC,EAAAC,cAAA,UAAQqC,KAAK,SAASlC,UAAU,mBAAhC,YAEFL,EAAAC,EAAAC,cAACsC,EAAD,CAAe3C,OAAQb,KAAKI,MAAMS,iBA9ClBmB,aCUXyB,EAbA,WACb,OACEzC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACbL,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,qBCEOwC,EAVA,WACb,OACE1C,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,sFCaOyC,mLAVX,OACE3C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAC0C,EAAD,MACA5C,EAAAC,EAAAC,cAAC2C,EAAD,MACA7C,EAAAC,EAAAC,cAAC4C,EAAD,cANU9B,aCIE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.16a41fa4.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Result extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      current: ''\r\n    }\r\n  }\r\n  openFullScreen(e){\r\n    this.setState({\r\n      current: e.target.largeImageURL\r\n    })\r\n    console.log(this.state)\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      this.props.images.map( image => {\r\n        return (\r\n          <div key={image.id} className='gallery-item'>\r\n            <img src={image.largeImageURL} alt={image.title} onClick={(e) => this.openFullScreen(e) } />\r\n            <div className='gallery-item-info'>\r\n              <FontAwesomeIcon icon={faHeart}  />\r\n              <p>{image.likes}</p>\r\n            </div>\r\n            <span className='gallery-item-info-author'>\r\n              <p>Author:{image.user}</p>\r\n            </span>\r\n          </div>\r\n        )\r\n      })\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Result;\r\n","import React  from 'react';\r\nimport Result from './Result'\r\n\r\n const ImagesGallery = (props) => {\r\n   return (\r\n       <div className='galleryGrid'>\r\n         <Result images = {props.images} />\r\n       </div>\r\n\r\n  )\r\n}\r\nexport default ImagesGallery;\r\n","import React, { Component  } from 'react';\r\nimport ImagesGallery from './ImageGallery';\r\n\r\n\r\n\r\nclass ImageSearch extends Component  {\r\n    constructor(props){\r\n      super(props)\r\n      this.state = {\r\n        searchValue: '',\r\n        images: []\r\n        }\r\n\r\n    this.getInputValue = this.getInputValue.bind(this);\r\n    this.getSearchedResults = this.getSearchedResults.bind(this);\r\n    }\r\n\r\n    getInputValue(e){\r\n        this.setState({\r\n          searchValue: e.target.value,\r\n          query: this.state.searchValue\r\n        })\r\n      };\r\n        // URL EXAMPLE\r\n        // https://pixabay.com/api/?key=10295258-c94968b52ea49aecf2600b8c7&q=yellow+flowers&image_type=photo\r\n    getSearchedResults(e){\r\n      e.preventDefault();\r\n      const url = 'https://pixabay.com/api';\r\n      const apiKey = '10295258-c94968b52ea49aecf2600b8c7';\r\n        try {\r\n          fetch(`${url}/?key=${apiKey}&q=${this.state.searchValue}&image_type=photo`)\r\n          .then(resp => resp.json())\r\n          .then(data => this.setState({\r\n            images: data.hits,\r\n            searchValue: ''\r\n          }))\r\n        } catch(err){\r\n          console.log(err);\r\n      }\r\n    }\r\n\r\n    render(){\r\n      return (\r\n        <div className='imageSearch'>\r\n          <form onSubmit= {this.getSearchedResults} className='search-form'>\r\n            <label>\r\n              Search for images in our gallery\r\n            </label>\r\n            <input onChange={this.getInputValue} value={this.state.searchValue}  placeholder='example: dog'/>\r\n            <button type='submit' className='imageSearch-btn'> Seach </button>\r\n          </form>\r\n          <ImagesGallery images={this.state.images}/>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\nexport default ImageSearch;\r\n","import React from 'react';\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className='navbar'>\r\n      <div className='navbar-logo'>\r\n        <h2>PixaBay</h2>\r\n      </div>\r\n      <div className='account-buttons'>\r\n        <p>SIGN UP</p>\r\n        <p>LOGIN</p>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <div className='header-text'>\r\n        <h1>Amazing Free Images</h1>\r\n        <p>discover more then 1 million images and videos shares by our community</p>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\nexport default Header;\r\n","import React, { Component  } from 'react';\nimport './App.css';\nimport ImageSearch from './ImageSearch';\nimport Navbar from './Navbar';\nimport Header from './Header';\n\n\n\nclass App extends Component  {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <Header />\n        <ImageSearch />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}