{"version":3,"sources":["Result.js","ImageGallery.js","ImageSearch.js","App.js","serviceWorker.js","index.js"],"names":["Result","props","images","map","image","react_default","a","createElement","key","id","className","src","largeImageURL","alt","title","user","ImagesGallery","src_Result","ImageSearch","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getInputValue","e","setState","searchValue","target","value","getSearchedResults","fetch","concat","state","then","resp","json","data","hits","err","console","log","onChange","type","onClick","ImageGallery","Component","App","src_ImageSearch","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAiBeA,SAfA,SAACC,GACd,OACEA,EAAMC,OAAOC,IAAK,SAAAC,GAChB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAMK,GAAIC,UAAU,qBAC5BL,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAMQ,cAAeC,IAAKT,EAAMU,QAC1CT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBAAYH,EAAMW,YCCfC,EAPQ,SAACf,GACrB,OACEI,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAACU,EAAD,CAAQf,OAAUD,EAAMC,WC2ChBgB,cA7CX,SAAAA,EAAYjB,GAAM,IAAAkB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMrB,KAORyB,cAAgB,SAACC,GACbR,EAAKS,SAAS,CACZC,YAAaF,EAAEG,OAAOC,SAVVZ,EAelBa,mBAAqB,SAACL,GAIlB,IACEM,MAAK,GAAAC,OAHG,0BAGH,UAAAA,OAFM,qCAEN,OAAAA,OAA4Bf,EAAKgB,MAAMN,YAAvC,sBACJO,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAG,GAAI,OAAIpB,EAAKS,SAAS,CAC1B1B,OAAQqC,EAAKC,SAEf,MAAMC,GACNC,QAAQC,IAAIF,GAGhBC,QAAQC,IAAIxB,EAAKgB,MAAMjC,SA3BvBiB,EAAKgB,MAAQ,CACXN,YAAa,GACb3B,OAAQ,IAJMiB,wEAiChB,OACEd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oDAGAF,EAAAC,EAAAC,cAAA,SAAOqC,SAAUtB,KAAKI,cAAeK,MAAOT,KAAKa,MAAMN,YAAagB,KAAK,SACzExC,EAAAC,EAAAC,cAAA,UAAQuC,QAAUxB,KAAKU,oBAAvB,WACA3B,EAAAC,EAAAC,cAACwC,EAAD,CAAe7C,OAAQoB,KAAKa,MAAMjC,iBAzClB8C,aCYXC,mLATX,OACE5C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,wBACEF,EAAAC,EAAAC,cAAC2C,EAAD,cALQF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.1b55d3e4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Result = (props) => {\r\n  return(\r\n    props.images.map( image => {\r\n      return (\r\n        <div key={image.id} className='galleryGrid-image'>\r\n          <img src={image.largeImageURL} alt={image.title} />\r\n          <div>\r\n            <p>@Credit:{image.user}</p>\r\n          </div>\r\n        </div>\r\n      )\r\n    })\r\n  )\r\n}\r\n\r\nexport default Result;\r\n","import React  from 'react';\r\nimport Result from './Result'\r\n\r\n const ImagesGallery = (props) => {\r\n   return (\r\n     <div className='galleryGrid'>\r\n       <Result images = {props.images} />\r\n     </div>\r\n  )\r\n}\r\nexport default ImagesGallery;\r\n","import React, { Component  } from 'react';\r\nimport ImagesGallery from './ImageGallery';\r\n\r\nclass ImageSearch extends Component  {\r\n    constructor(props){\r\n      super(props)\r\n      this.state = {\r\n        searchValue: '',\r\n        images: []\r\n        }\r\n    }\r\n\r\n    getInputValue = (e) => {\r\n        this.setState({\r\n          searchValue: e.target.value\r\n        })\r\n      };\r\n        // URL EXAMPLE\r\n        // https://pixabay.com/api/?key=10295258-c94968b52ea49aecf2600b8c7&q=yellow+flowers&image_type=photo\r\n    getSearchedResults = (e) => {\r\n      //  e.preventDefault();\r\n      const url = 'https://pixabay.com/api';\r\n      const apiKey = '10295258-c94968b52ea49aecf2600b8c7';\r\n        try {\r\n          fetch(`${url}/?key=${apiKey}&q=${this.state.searchValue}&image_type=photo`)\r\n          .then(resp => resp.json())\r\n          .then(data => this.setState({\r\n            images: data.hits\r\n          }))\r\n        } catch(err){\r\n          console.log(err);\r\n        }\r\n\r\n      console.log(this.state.images)\r\n      }\r\n\r\n    render(){\r\n      return (\r\n        <div>\r\n          <label>\r\n            Search for images in our gallery!!!\r\n          </label>\r\n          <input onChange={this.getInputValue} value={this.state.searchValue} type='text'/>\r\n          <button onClick= {this.getSearchedResults} > Seach </button>\r\n          <ImagesGallery images={this.state.images}/>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\nexport default ImageSearch;\r\n","import React, { Component  } from 'react';\nimport './App.css';\nimport ImageSearch from './ImageSearch';\n\nclass App extends Component  {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Search App</h1>\n          <ImageSearch />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}